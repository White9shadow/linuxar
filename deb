#!/bin/bash

# Script to create a Debian package for a given script with custom metadata
# Usage: ./deb.sh <mainscript.sh> <license_file> <description_file> <release_note_file>
# Example: ./deb.sh linuxar.sh LICENSE description.txt release_note.txt

# Check for correct number of arguments
if [ "$#" -ne 4 ]; then
    echo "Usage: $0 <mainscript.sh> <license_file> <description_file> <release_note_file>"
    echo "Example: $0 linuxar.sh LICENSE description.txt release_note.txt"
    exit 1
fi

# Assign arguments to variables
MAIN_SCRIPT="$1"
LICENSE_FILE="$2"
DESCRIPTION_FILE="$3"
RELEASE_NOTE_FILE="$4"

# Validate main script existence
if [ ! -f "$MAIN_SCRIPT" ]; then
    echo "Error: Main script file '$MAIN_SCRIPT' not found."
    exit 1
fi

# Validate license file existence
if [ ! -f "$LICENSE_FILE" ]; then
    echo "Error: License file '$LICENSE_FILE' not found."
    exit 1
fi

# Validate description file existence
if [ ! -f "$DESCRIPTION_FILE" ]; then
    echo "Error: Description file '$DESCRIPTION_FILE' not found."
    exit 1
fi

# Validate release note file existence
if [ ! -f "$RELEASE_NOTE_FILE" ]; then
    echo "Error: Release note file '$RELEASE_NOTE_FILE' not found."
    exit 1
fi

# Set default project homepage
PROJECT_HOMEPAGE="https://magiskmodule.gitlab.io"

# Prompt for version number
read -p "Enter the version number (e.g., 1.0-1): " VERSION
if [ -z "$VERSION" ]; then
    echo "Error: Version number cannot be empty. Using default '1.0-1'."
    VERSION="1.0-1"
fi

# Check for shc (Shell Script Compiler) and install if not present
if ! command -v shc >/dev/null 2>&1; then
    echo "shc not found. Attempting to install shc..."
    sudo apt update
    sudo apt install -y shc
    if ! command -v shc >/dev/null 2>&1; then
        echo "Error: Failed to install shc. Please install it manually and try again."
        exit 1
    fi
fi

# Read the description
PROJECT_DESCRIPTION=$(cat "$DESCRIPTION_FILE")

# Extract script name (without extension)
SCRIPT_NAME=$(basename "$MAIN_SCRIPT" .sh)

# Set license name explicitly to MIT
LICENSE_NAME="MIT"

# Read the license text
LICENSE_TEXT=$(cat "$LICENSE_FILE")

# Read the release note
RELEASE_NOTE=$(cat "$RELEASE_NOTE_FILE")

# Define package variables
PACKAGE_NAME="$SCRIPT_NAME"
PACKAGE_DIR="${PACKAGE_NAME}_${VERSION}"

# Encrypt the shell script using shc
echo "Encrypting the shell script '$MAIN_SCRIPT' into a binary..."
shc -f "$MAIN_SCRIPT" -o "${SCRIPT_NAME}_encrypted"
if [ ! -f "${SCRIPT_NAME}_encrypted" ]; then
    echo "Error: Failed to encrypt the shell script."
    exit 1
fi

# Create directory structure
mkdir -p "$PACKAGE_DIR/DEBIAN"
mkdir -p "$PACKAGE_DIR/usr/bin"
mkdir -p "$PACKAGE_DIR/usr/share/man/man1"
mkdir -p "$PACKAGE_DIR/usr/share/doc/$PACKAGE_NAME"

# Copy the encrypted binary to /usr/bin
cp "${SCRIPT_NAME}_encrypted" "$PACKAGE_DIR/usr/bin/$SCRIPT_NAME"
chmod 755 "$PACKAGE_DIR/usr/bin/$SCRIPT_NAME"

# Clean up temporary files generated by shc
rm -f "${SCRIPT_NAME}_encrypted" "${SCRIPT_NAME}.sh.x.c"

# Create the DEBIAN/control file
cat << EOF > "$PACKAGE_DIR/DEBIAN/control"
Package: $PACKAGE_NAME
Version: $VERSION
Section: utils
Priority: optional
Architecture: all
Depends: bash, coreutils, findutils, sed, grep, procps
Maintainer: White9shadow <white9shadow@example.com>
Description: $PROJECT_DESCRIPTION
Homepage: $PROJECT_HOMEPAGE
Source: https://github.com/White9shadow/linuxar
License: $LICENSE_NAME
EOF

# Create the DEBIAN/postinst script
cat << EOF > "$PACKAGE_DIR/DEBIAN/postinst"
#!/bin/sh
set -e
chmod 755 /usr/bin/$SCRIPT_NAME
if [ -f /usr/share/man/man1/$SCRIPT_NAME.1.gz ]; then
    chmod 644 /usr/share/man/man1/$SCRIPT_NAME.1.gz
fi
exit 0
EOF
chmod 755 "$PACKAGE_DIR/DEBIAN/postinst"

# Create the DEBIAN/prerm script
cat << EOF > "$PACKAGE_DIR/DEBIAN/prerm"
#!/bin/sh
set -e
exit 0
EOF
chmod 755 "$PACKAGE_DIR/DEBIAN/prerm"

# Create a man page
cat << EOF > "$PACKAGE_DIR/usr/share/man/man1/$SCRIPT_NAME.1"
.TH ${SCRIPT_NAME^^} 1 "April 15, 2025" "1.0" "User Commands"
.SH NAME
$SCRIPT_NAME - System optimization tool
.SH SYNOPSIS
.B $SCRIPT_NAME
.SH DESCRIPTION
.PP
$PROJECT_DESCRIPTION
.SH OPTIONS
.PP
The tool provides an interactive menu with the following options:
.TP
.B 1. Optimize System
Cleans junk files and applies performance tweaks.
.TP
.B 2. Restore Previous Settings
Reverts changes made by the optimization process.
.TP
.B 3. Exit
Exits the tool.
.SH AUTHOR
Written by White9shadow.
.SH COPYRIGHT
Licensed under the $LICENSE_NAME License.
EOF
gzip "$PACKAGE_DIR/usr/share/man/man1/$SCRIPT_NAME.1"
chmod 644 "$PACKAGE_DIR/usr/share/man/man1/$SCRIPT_NAME.1.gz"

# Create copyright file
cat << EOF > "$PACKAGE_DIR/usr/share/doc/$PACKAGE_NAME/copyright"
Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Upstream-Name: $PACKAGE_NAME
Source: https://github.com/White9shadow/linuxar

Files: *
Copyright: 2025 White9shadow
License: $LICENSE_NAME
$LICENSE_TEXT
EOF
chmod 644 "$PACKAGE_DIR/usr/share/doc/$PACKAGE_NAME/copyright"

# Create changelog using release note
cat << EOF > "$PACKAGE_DIR/usr/share/doc/$PACKAGE_NAME/changelog.Debian"
$PACKAGE_NAME ($VERSION) unstable; urgency=medium

$RELEASE_NOTE

 -- White9shadow <white9shadow@example.com>  Tue, 15 Apr 2025 00:00:00 +0000
EOF
gzip "$PACKAGE_DIR/usr/share/doc/$PACKAGE_NAME/changelog.Debian"
chmod 644 "$PACKAGE_DIR/usr/share/doc/$PACKAGE_NAME/changelog.Debian.gz"

# Build the .deb package
dpkg-deb --build "$PACKAGE_DIR"

# Notify user
echo "Debian package '$PACKAGE_DIR.deb' created successfully."
